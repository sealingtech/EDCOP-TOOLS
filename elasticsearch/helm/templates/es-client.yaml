apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: {{ template "elasticsearch.fullname" . }}
  labels:
    app: {{ template "elasticsearch.name" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
    component: {{ template "elasticsearch.name" . }}
    role: client
spec:
  template:
    metadata:
      name: {{ template "elasticsearch.name" . }}
      labels:
        component: {{ template "elasticsearch.name" . }}
        role: client
      annotations:
        networks: '[
        { "name": "{{ .Values.networks.overlay }}" }
      ]'
    spec:
      containers:
      - name: es-client
        image: {{ .Values.image.repository }}/elasticsearch
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CLUSTER_NAME
          value: {{ .Values.elasticsearchConfig.env.clustername }}
        - name: NODE_MASTER
          value: "false"
        - name: NETWORK_HOST
          value: _eth0_,_lo_
        - name: ES_JAVA_OPTS
          value: "{{ .Values.elasticsearchConfig.env.javaopts }}"
        ports:
        - name: cport-9200
          containerPort: 9200
        - name: cport-9300
          containerPort: 9300
        resources:
          limits:
            cpu: "{{ .Values.elasticsearchConfig.limits.cpu }}"
            memory: "{{ .Values.elasticsearchConfig.limits.memory }}"
        imagePullPolicy: Always
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/data
          name: esdata
        - mountPath: /usr/share/elasticsearch/config/jvm.options
          subPath: jvm.options
          name: elasticsearch-jvm

      volumes:
      - name: esdata
        hostPath:
          path: {{ .Values.volumes.data }}
      - name: elasticsearch-jvm
        configMap:
          name: {{ template "elasticsearch.fullname" . }}-jvm

      restartPolicy: Always
      dnsPolicy: ClusterFirst
      nodeSelector:
        nodetype: {{ .Values.nodeSelector.nodetype }}
